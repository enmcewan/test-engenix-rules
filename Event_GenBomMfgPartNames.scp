//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=1
//ScriptGroup=Stackup
//HeaderImportExport<--
{ Script if called as the stackup if modified, materials dragged in etc, etc.
  Also MfgParts are created to see how the build will be pressed, required
  for an acurate thickness calculation.

  - Input ParamList
      ParamList[0] : BomLevel
      ParamList[1] : Type: TopLevel, Inner, SubAssy
      ParamList[2] : TopLayer
      ParamList[3] : BottomLayer
      ParamList[4] : First Layer of child MfgPart (for SubAssy's)
      ParamList[5] : Last Layer of child MfgPart (for SubAssy's)
      ParamList[6] : First Layer of Parent MfgPart (for SubAssy's)
      ParamList[7] : Last Layer of Parent MfgPart (for SubAssy's)
      ParamList[8] : Obsolete, not used anymore
      ParamList[9] : 'Tooling' when Tooling MfgPart

  - Input MfgPartList
      MfgPartList[x].Strings existing MfgPart names already generated

  - Result
      Ouptut, name for the MfgPart
}                                      

function EngenixMfgPartName(ParamList: TStringList; MfgPartList: TStringList): string;
var
  NameSeq: integer;
begin
  NameSeq := 0;
  Result := '';

  repeat
    // Check for tooling
    if Trim(ParamList[9]) = '' then
      Result := ParamList[1]
    else
      Result := ParamList[9];

    if LowerCase(Result) <> 'toplevel' then
    begin

      if ParamList[1] = 'TopAssembly' then
         result := 'Assembly'
      else
      begin
      if NameSeq > 0 then
        Result := Result + ' -' + IntToStr(NameSeq);

      Result := Result + ' ';

      if ParamList[2] > '' then
        Result := Result + ParamList[2] + ' / '
      else
        Result := Result + 'x / ';

      if ParamList[3] > '' then
        Result := Result + ParamList[3]
      else
        Result := Result + 'x';
      end;
      
      Inc(NameSeq);

    end;

  until MfgPartList.IndexOf(Result) < 0;

//  showmessage('MfgPart Name' + #13#13 + Result);
end;
