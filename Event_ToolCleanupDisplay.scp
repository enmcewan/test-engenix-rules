//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=1
//ScriptGroup=Layer Maintenance
//HeaderImportExport<--
procedure SetParam(ToolDataSet: TSysTable; FieldName: string;                    
                   aReadOnly: boolean; Indx: integer;
                   DispWidth: integer; DispLabel: string);
begin
  ToolDataSet.FieldByName(FieldName).Visible := True;
  ToolDataSet.FieldByName(FieldName).ReadOnly := aReadOnly;
  ToolDataSet.FieldByName(FieldName).Index := Indx;
  ToolDataSet.FieldByName(FieldName).DisplayWidth := DispWidth;
  if DispLabel <> '' then
    ToolDataSet.FieldByName(FieldName).DisplayLabel := DispLabel;

  if ToolDataSet.FieldByName(FieldName).DataType = ftFloat then
  begin
    TFloatField(ToolDataset.FieldByName(FieldName)).DisplayFormat := '0.0000';
    TFloatField(ToolDataset.FieldByName(FieldName)).EditFormat := '0.0000';
  end;

end;

procedure ToolsCleanupDisplay(ToolDataSet: TSysTable);
var
  I01: integer;
begin
  for I01 := 0 to ToolDataSet.FieldCount -1 do
    ToolDataSet.Fields[I01].Visible := false;

  // Set parametesr for fields that have to visible to the user

  if ToolDataSet.FieldDefs.IndexOf('Tool') > -1 then
    SetParam(ToolDataSet, 'Tool', True, 0, 5, 'Tool');

  if ToolDataSet.FieldDefs.IndexOf('Finish_Size') > -1 then
    SetParam(ToolDataSet, 'Finish_Size', False, 1, 10, 'Finished Size');

  if ToolDataSet.FieldDefs.IndexOf('Drill_Size') > -1 then
    SetParam(ToolDataSet, 'Drill_Size', False, 2, 10, 'Drill Size');

  if ToolDataSet.FieldDefs.IndexOf('Min_Tol') > -1 then
    SetParam(ToolDataSet, 'Min_Tol', False, 3, 7, 'Min.Tol');

  if ToolDataSet.FieldDefs.IndexOf('Max_Tol') > -1 then
    SetParam(ToolDataSet, 'Max_Tol', False, 4, 7, 'Max.Tol');

  if ToolDataSet.FieldDefs.IndexOf('HoleType') > -1 then
    SetParam(ToolDataSet, 'HoleType', False, 5, 10, '');

  if ToolDataSet.FieldDefs.IndexOf('DrillType') > -1 then
    SetParam(ToolDataSet, 'DrillType', True, 6, 10, '');

  if ToolDataSet.FieldDefs.IndexOf('NumHoles') > -1 then
    SetParam(ToolDataSet, 'NumHoles', False, 7, 10, '#Holes/Part');

  if ToolDataSet.FieldDefs.IndexOf('TotNumHoles') > -1 then
    SetParam(ToolDataSet, 'TotNumHoles', False, 8, 10, '#Holes/Panel');

  if ToolDataSet.FieldDefs.IndexOf('ToolRef') > -1 then
    SetParam(ToolDataSet, 'ToolRef', False, 9, 5, '');

  if ToolDataSet.FieldDefs.IndexOf('Notes') > -1 then
    SetParam(ToolDataSet, 'Notes', False, 10, 50, '');

  if ToolDataSet.FieldDefs.IndexOf('ToolUOM') > -1 then
    SetParam(ToolDataSet, 'ToolUOM', False, 11, 10, 'UOM');

  if ToolDataSet.FieldDefs.IndexOf('Type2') > -1 then
    SetParam(ToolDataSet, 'Type2', False, 12, 10, '');

  if ToolDataSet.FieldDefs.IndexOf('SlotRqd') > -1 then
    SetParam(ToolDataSet, 'SlotRqd', False, 13, 10, 'SlotRequired');

  if ToolDataSet.FieldDefs.IndexOf('ToolStepName') > -1 then
    SetParam(ToolDataSet, 'ToolStepName', True, 14, 20, '');
end;

procedure CleanupDisplay(ToolDataSet: TSysTable; ParamList: TStringList; FieldOptions: TStringList);
var
  LayerType: string;
begin
//  showmessage(ParamList.Text);
//  Fnc.OpenDataGrid(ToolDataSet, nil, nil, True);

  LayerType := UpperCase(ParamList.Values['LayerType']);

  if LayerType = 'DRILL' then
  begin                   
    ToolsCleanupDisplay(ToolDataSet);

    // example to present a dropdown to the user for the field 'HoleType'
    FieldOptions.Add('HoleType=Laser');
    FieldOptions.Add('HoleType=Via');
    FieldOptions.Add('HoleType=Plated');
    FieldOptions.Add('HoleType=Non Plated');
  end;

  if LayerType = 'ROUT' then
  begin
    ToolsCleanupDisplay(ToolDataSet);

    FieldOptions.Add('HoleType=OutLine');
    FieldOptions.Add('HoleType=Slot');
  end;
end;
